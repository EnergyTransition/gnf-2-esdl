#  This work is based on original code developed and copyrighted by TNO 2022.
#  Subsequent contributions are licensed to you by the developers of such code and are
#  made available to the Project under one or several contributor license agreements.
#
#  This work is licensed to you under the Apache License, Version 2.0.
#  You may obtain a copy of the license at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Contributors:
#      TNO         - Initial implementation
#  Manager:
#      TNO

import glob
import os

from esdl.esdl_handler import EnergySystemHandler
from assets import Item, ItemDict


def process_gnf(gnf_lines):
    item_dict = ItemDict()
    state = None
    counters = dict()

    for idx, line in enumerate(gnf_lines):
        if idx < 3:
            continue

        # End of category, set state to None
        if line == "[]":
            state = None

        # Start of new category
        if len(line) > 1 and line[0] == "[" and line[1] != "]":
            state = line[1:-1]
            print(idx, state)

        # Start of new item in category
        if line[0:3] == "#1 ":
            # Update counters
            if state in counters:
                counters[state] += 1
            else:
                counters[state] = 1

            if state in ["PROFILE", "NODE", "LINK", "CABLE", "TRANSFORMER", "SOURCE", "HOME"]:
                item = Item.parse_GNF(state, idx, gnf_lines)
                item_dict.add(item)
            else:
                print("-- Ignored")

    print("-------------------------------------------------")
    print("  Totals")
    print("-------------------------------------------------")
    for cnt in counters:
        print(cnt, counters[cnt])

    return item_dict


if __name__ == "__main__":
    esh = EnergySystemHandler()

    for filename_and_path in glob.glob("input/*.gnf"):
        filename = os.path.basename(filename_and_path)
        filename_without_extension = os.path.splitext(filename)[0]
        es = esh.create_empty_energy_system(name=filename_without_extension, es_description="Autogenerated based on GNF file "+filename,
                                            inst_title="Instance name", area_title="Area name")

        with open(filename_and_path) as file:
            gnf_lines = file.readlines()
            gnf_lines = [line.strip() for line in gnf_lines]

        item_dict = process_gnf(gnf_lines)
        item_dict.generate_assets(es)
        item_dict.generate_connections()

        esh.save("output/" + filename_without_extension + '.esdl')